{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'mb-2',
    'container'
  ]
%}
<!-- This is the machine name of the Drupal Image Style. Must be added as a taxonomy term at /admin/structure/taxonomy/manage/image_style/overview Complete listing of styles found at: /admin/config/media/image-styles -->
{% set styleName = content.field_image_style | render | striptags | trim | lower %}
{% set imageStyle = content.field_image_style | field_target_entity.field_classes.value %}
<!-- This field contains bootstrap column classes. Must be added as a taxonomy term at /admin/structure/taxonomy/manage/items_per_row/overview Auto defaults to 'col' -->
{% set itemsPerRow = content.field_items_per_row | field_target_entity.field_classes.value %}

{#}
Due to the fact that I have nested paragraphs and want to be able to modify image styles. I had to download a module that allows me to access the render array. The module provides a twig filter called field_value.
Read more at: 
https://www.drupal.org/project/twig_field_value

Module "Twig Tweak" allows me to generate the image based on selected style.
https://www.drupal.org/project/twig_tweak

The values inside my paragraph are found here: 
Button Title:
      {{ content.field_buttons|field_value[3]['#paragraph'].field_button_title.value }}
This is how image is generated based on style selected. Style is applied to all images in button group.
      <!-- Wrap around file_url(uri) to get url in this case i want to apply style -->
      <img src="{{ content.field_buttons|field_value[3]['#paragraph'].field_button_image.entity.fileuri|image_style('letter_medium_scale_crop_') }}">
Button URL:
      {{ content.field_buttons|field_value[3]['#paragraph'].field_button_url.0.url }}
Button Description: 
      {{ content.field_buttons|field_value[3]['#paragraph'].field_button_description.value }}
{#}

{% block paragraph %}
    <div class="{{ content.field_background_color|render|striptags|trim|split(' ')|last }} container-fluid">
        <div{{attributes.addclass(classes)}}>
            <div class="row py-4">
                {% block content %}
                    <!-- buttons is an array of entity references to paragraphs of type "Image Grid Item" /admin/structure/paragraphs_type/image_grid_item/fields The module "Twig Field Value" provides the filter 'field_target_entity': Returns the referenced entity object(s) of an entity reference field. -->
                    {% set buttons = content.field_grid_item | field_value %}
                    {% for button in buttons %}
                        <div class="{{ itemsPerRow }} d-flex align-items-stretch mb-3">
                            <!-- card Start -->
                            <a class="d-flex no-decoration graphical-button" href="{{ button['#paragraph'].field_link.0.url }}">
                                <div class="card">
                                    <div class="card-img-top static-flex p-1"><img alt="" class="img-fluid" src="{{ button['#paragraph'].field_button_image.entity.fileuri|image_style(imageStyle) }}"/></div>
                                    <div class="card-footer h-100 text-center">
                                        <div class="font-weight-bold pb-2">{{ button['#paragraph'].field_image_title.value }}</div>
                                        <div class="description">{{ button['#paragraph'].field_image_description.value }}</div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    {% endfor %}
                {% endblock %}
            </div>
        </div>
    </div>
{% endblock paragraph %}